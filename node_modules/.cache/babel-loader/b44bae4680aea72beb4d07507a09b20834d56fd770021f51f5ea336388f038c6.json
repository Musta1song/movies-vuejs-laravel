{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport DataService from '@/DataService';\nimport axios from 'axios';\nimport translate from \"translate\";\nexport default {\n  name: \"FavoriteMovies\",\n  data() {\n    return {\n      data: [],\n      MovieList: [],\n      isLoading: false,\n      err: \"\",\n      headers: [{\n        title: 'Titel',\n        value: 'Title'\n      }, {\n        title: 'Jahr',\n        value: 'Year'\n      }, {\n        title: 'Laufzeit',\n        value: 'Runtime'\n      }, {\n        title: 'Poster',\n        value: 'Director'\n      }, {\n        title: 'Poster',\n        value: 'Writer'\n      }, {\n        title: 'Poster',\n        value: 'Actors'\n      }, {\n        title: 'Poster',\n        value: 'Poster'\n      }]\n    };\n  },\n  methods: {\n    async translateToGerman(toTranslate) {\n      translate.engine = \"libre\";\n      try {\n        let text = await translate(toTranslate, \"de\");\n        console.log(text);\n        return ` <h1>${text}</h1>`;\n      } catch (errorReason) {\n        // code on error\n      }\n    },\n    getFavoriteMovies() {\n      DataService.getAll().then(response => {\n        this.MovieList = response.data;\n        console.log(this.MovieList);\n        this.MovieList = JSON.parse(JSON.stringify(this.MovieList));\n        console.log(this.MovieList);\n        this.fetchData();\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    fetchData() {\n      console.log(\"fetchData-init\");\n      for (let i = 0; i < this.MovieList.length; i++) {\n        const url = `https://www.omdbapi.com/?apikey=385748cd&i=${this.MovieList[i].imdbID}`;\n        console.log(\"fetchData-loop\");\n        axios.get(url).then(response => {\n          this.data.push(response.data);\n        });\n      }\n      console.log(this.data);\n    }\n  },\n  mounted() {\n    console.log(\"halo\");\n    this.getFavoriteMovies();\n  }\n};","map":{"version":3,"names":["DataService","axios","translate","name","data","MovieList","isLoading","err","headers","title","value","methods","translateToGerman","toTranslate","engine","text","console","log","errorReason","getFavoriteMovies","getAll","then","response","JSON","parse","stringify","fetchData","catch","e","i","length","url","imdbID","get","push","mounted"],"sources":["/home/mustafa/Dokumente/GitHub/vuemovies/src/components/favorites/FavoriteMovies.vue"],"sourcesContent":["<template>\n    <div>\n        <table>\n            <tr>\n                <th>\n                    Poster\n                </th>\n                <th>Title</th>\n                <th>Jahr</th>\n                <th>Laufzeit</th>\n                <th>Rating</th>\n                <th>Regisseur</th>\n                <th>Drehbuch</th>\n                <th>Schauspieler</th>\n                <th>Genre</th>\n                <th>Land</th>\n\n            </tr>\n            <tr v-for=\"x in  data \" :key=\"x\">\n                <td><img :src=\"x.Poster\" alt=\"\"></td>\n                <td>{{ x.Title }}</td>\n                <td>{{ x.Year }}</td>\n                <td>{{ x.Runtime }}</td>\n                <td>{{ x.imdbRating }}</td>\n                <td>{{ x.Director }}</td>\n                <td>{{ x.Writer }}</td>\n                <td>{{ x.Actors }}</td>\n                <td>{{ x.Genre }}</td>\n                <td class=\"lasttd\">{{ translateToGerman(x.Country) }}</td>\n            </tr>\n        </table>\n    </div>\n\n\n</template>\n<script>\nimport DataService from '@/DataService';\nimport axios from 'axios';\nimport translate from \"translate\";\nexport default {\n    name: \"FavoriteMovies\",\n\n    data() {\n        return {\n            data: [],\n            MovieList: [],\n            isLoading: false,\n            err: \"\",\n            headers: [\n\n                { title: 'Titel', value: 'Title' },\n                { title: 'Jahr', value: 'Year' },\n                { title: 'Laufzeit', value: 'Runtime' },\n                { title: 'Poster', value: 'Director' },\n                { title: 'Poster', value: 'Writer' },\n                { title: 'Poster', value: 'Actors' },\n                { title: 'Poster', value: 'Poster' },\n\n            ]\n\n        };\n    },\n\n    methods: {\n        async translateToGerman(toTranslate) {\n\n            translate.engine = \"libre\";\n\n            try {\n                let text = await translate(toTranslate, \"de\")\n                console.log(text)\n                return ` <h1>${text}</h1>`\n\n            }\n            catch (errorReason) {\n                // code on error\n            }\n\n        },\n        getFavoriteMovies() {\n            DataService.getAll()\n                .then(response => {\n                    this.MovieList = response.data\n                    console.log(this.MovieList)\n                    this.MovieList = JSON.parse(JSON.stringify(this.MovieList))\n                    console.log(this.MovieList)\n                    this.fetchData()\n\n\n                })\n                .catch(e => {\n                    console.log(e);\n                });\n\n\n        },\n        fetchData() {\n            console.log(\"fetchData-init\")\n\n            for (let i = 0; i < this.MovieList.length; i++) {\n                const url = `https://www.omdbapi.com/?apikey=385748cd&i=${this.MovieList[i].imdbID}`;\n\n\n                console.log(\"fetchData-loop\")\n\n\n\n                axios.get(url).then(\n                    response => {\n                        this.data.push(response.data)\n                    }\n                )\n\n\n\n            }\n            console.log(this.data)\n\n        }\n    },\n    mounted() {\n        console.log(\"halo\")\n        this.getFavoriteMovies();\n    }\n\n\n}\n\n</script>\n<style scoped>\nimg {\n    max-height: 150px;\n}\n\ntd {\n    border-left: 1px solid rgb(203, 199, 199);\n    max-width: 100px;\n}\n\ntd {\n    border-bottom: 1px solid rgb(125, 123, 123);\n\n}\n\ntable {\n    min-width: 70%;\n}\n\nth {\n    padding-left: 10px;\n    padding-right: 10px;\n    margin-left: 10px;\n    border-bottom: 1px solid rgb(203, 199, 199);\n\n\n}\n\n.lasttd {\n    border-right: 1px solid rgb(203, 199, 199);\n\n}\n\ndiv {\n    display: flex;\n    justify-content: center;\n}\n</style>"],"mappings":";AAoCA,OAAOA,WAAU,MAAO,eAAe;AACvC,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,SAAQ,MAAO,WAAW;AACjC,eAAe;EACXC,IAAI,EAAE,gBAAgB;EAEtBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHA,IAAI,EAAE,EAAE;MACRC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE,KAAK;MAChBC,GAAG,EAAE,EAAE;MACPC,OAAO,EAAE,CAEL;QAAEC,KAAK,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ,CAAC,EAClC;QAAED,KAAK,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAO,CAAC,EAChC;QAAED,KAAK,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAU,CAAC,EACvC;QAAED,KAAK,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAW,CAAC,EACtC;QAAED,KAAK,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAS,CAAC,EACpC;QAAED,KAAK,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAS,CAAC,EACpC;QAAED,KAAK,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAS,CAAC;IAI5C,CAAC;EACL,CAAC;EAEDC,OAAO,EAAE;IACL,MAAMC,iBAAiBA,CAACC,WAAW,EAAE;MAEjCX,SAAS,CAACY,MAAK,GAAI,OAAO;MAE1B,IAAI;QACA,IAAIC,IAAG,GAAI,MAAMb,SAAS,CAACW,WAAW,EAAE,IAAI;QAC5CG,OAAO,CAACC,GAAG,CAACF,IAAI;QAChB,OAAO,QAAQA,IAAK,OAAK;MAE7B,EACA,OAAOG,WAAW,EAAE;QAChB;MAAA;IAGR,CAAC;IACDC,iBAAiBA,CAAA,EAAG;MAChBnB,WAAW,CAACoB,MAAM,CAAC,EACdC,IAAI,CAACC,QAAO,IAAK;QACd,IAAI,CAACjB,SAAQ,GAAIiB,QAAQ,CAAClB,IAAG;QAC7BY,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,SAAS;QAC1B,IAAI,CAACA,SAAQ,GAAIkB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACpB,SAAS,CAAC;QAC1DW,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,SAAS;QAC1B,IAAI,CAACqB,SAAS,CAAC;MAGnB,CAAC,EACAC,KAAK,CAACC,CAAA,IAAK;QACRZ,OAAO,CAACC,GAAG,CAACW,CAAC,CAAC;MAClB,CAAC,CAAC;IAGV,CAAC;IACDF,SAASA,CAAA,EAAG;MACRV,OAAO,CAACC,GAAG,CAAC,gBAAgB;MAE5B,KAAK,IAAIY,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAACxB,SAAS,CAACyB,MAAM,EAAED,CAAC,EAAE,EAAE;QAC5C,MAAME,GAAE,GAAK,8CAA6C,IAAI,CAAC1B,SAAS,CAACwB,CAAC,CAAC,CAACG,MAAO,EAAC;QAGpFhB,OAAO,CAACC,GAAG,CAAC,gBAAgB;QAI5BhB,KAAK,CAACgC,GAAG,CAACF,GAAG,CAAC,CAACV,IAAI,CACfC,QAAO,IAAK;UACR,IAAI,CAAClB,IAAI,CAAC8B,IAAI,CAACZ,QAAQ,CAAClB,IAAI;QAChC,CACJ;MAIJ;MACAY,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,IAAI;IAEzB;EACJ,CAAC;EACD+B,OAAOA,CAAA,EAAG;IACNnB,OAAO,CAACC,GAAG,CAAC,MAAM;IAClB,IAAI,CAACE,iBAAiB,CAAC,CAAC;EAC5B;AAGJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}