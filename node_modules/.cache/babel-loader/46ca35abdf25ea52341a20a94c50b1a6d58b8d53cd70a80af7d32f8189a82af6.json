{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  className: \"rates\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"1\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [..._hoisted_3]);\n}","map":{"version":3,"names":["className","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_1","_hoisted_3"],"sources":["/home/mustafa/Dokumente/GitHub/vuemovies/movies/src/components/favorites/favorites.vue"],"sourcesContent":["<template>\n    <div className=\"rates\">\n        <div id='1'></div>\n\n    </div>\n</template>\n<script>\nimport ApiService from \"@/DataService\";\nexport default {\n    name: \"Favorites\",\n\n    data() {\n        return {\n            data: [],\n            MovieList: [],\n            isLoading: false,\n            err: \"\"\n\n        };\n    },\n\n    methods: {\n        getFavoriteMovies() {\n            ApiService.getAll()\n                .then(response => {\n                    console.log(response.data)\n                    setMovieList(response.data);\n\n                })\n                .catch(e => {\n                    console.log(e);\n                });\n\n\n        },\n        async fetchData() {\n            try {\n                const promises = MovieList.map(async (movie) => {\n\n                    let ID = movie.imdbID;\n                    let url = `http://www.omdbapi.com/?apikey=385748cd&i=${ID}`;\n                    console.log(ID)\n\n                    const response = await fetch(url, {\n                        method: 'GET',\n                        headers: {\n                            Accept: 'application/json',\n                        },\n                    });\n\n                    if (!response.ok) {\n                        throw new Error(`Error! status: ${response.status}`);\n                    }\n\n                    const result = await response.json();\n                    return result;\n                });\n\n                const results = await Promise.all(promises);\n                setData(results);\n                console.log(results)\n            } catch (err) {\n                setErr(err.message);\n            } finally {\n                setIsLoading(false);\n            }\n            console.log(data)\n\n            document.getElementById(\"1\").innerHTML = \"<img src={data[0].Poster} alt=''></img> \"\n\n        },\n\n\n\n    }\n}\n\n</script>\n<style scoped></style>"],"mappings":";;EACSA,SAAS,EAAC;AAAO;gCAClBC,mBAAA,CAAkB;EAAbC,EAAE,EAAC;AAAG;oBAAXC,UAAkB,C;;uBADtBC,mBAAA,CAGM,OAHNC,UAGM,EAJV,IAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}